@using DominosCutScreen.Shared
@using System.Globalization;

<div class="card m-2" style="flex: 0 0 18rem;">
    <div class="card-body">
        @{
            var lastBumpTime = @MakelineOrder.Items.Max(i => i.BumpedTimes.Max());
        }
        <div class="progress">
            <div class="progress-bar" data-time="@(lastBumpTime.ToString("s"))"></div>
        </div>
        <h5 class="card-title">Order @MakelineOrder.OrderNumber | @lastBumpTime.ToString("T")</h5>
        @{
            var items = MakelineOrder.Items;
            var groupedSeq = items.GroupBySequential(i => new { i.Description, i.ToppingModifications }, i => i, (x, y) => x.Description.Equals(y.Description, StringComparison.InvariantCultureIgnoreCase) && Enumerable.SequenceEqual(x.ToppingModifications, y.ToppingModifications));
            var selected = groupedSeq.Select(x =>
            {
                var item = x.First();
                item.Quantity = x.Count();
                return item;
            });
            var ordered = selected.OrderBy(i => i.LineNumber);
        }
        @foreach (var item in ordered)
        {
            <OrderItem Item=item />
        }
    </div>
    <div class="card-footer text-center">
        <small class="text-muted">@(MakelineOrder.IsElectronic ? "Internet" : CultureInfo.CurrentCulture.TextInfo.ToTitleCase(MakelineOrder.TakenBy.ToLower()))</small>
    </div>

    <a class="stretched-link" href="#" @onclick:preventDefault @onclick="@(async e => { await OnClicked.InvokeAsync(MakelineOrder); })"></a>
</div>

@code {
    [Parameter, EditorRequired]
    public required MakeLineOrder MakelineOrder { get; set; }

    [Parameter]
    public EventCallback<MakeLineOrder> OnClicked { get; set; }
}
