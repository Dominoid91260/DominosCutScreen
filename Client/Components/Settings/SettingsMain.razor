@using DominosCutScreen.Shared;
@inject HttpClient Http
@inject SettingsService Settings

<!-- Makeline Host -->
<div class="form-floating mb-1">
    <InputText class="form-control" @bind-Value="Settings.MakelineServer" @bind-Value:after="OnMakelineHostChanged" />
    <label class="form-label">Makeline Host</label>
</div>

<!-- Makeline Code -->
<div class="form-floating mb-1">
    <InputNumber class="form-control" @bind-Value="Settings.MakelineCode" @bind-Value:after="OnMakelineCodeChanged" />
    <label>Makeline Code</label>
</div>

<!-- PulseApi Server -->
<div class="form-floating mb-1">
    <InputText class="form-control" @bind-Value="Settings.PulseApiServer" @bind-Value:after="OnPulseApiServerChanged" />
    <label>Pulse Api Server</label>
</div>

<!-- Makeline Fetch Time -->
<div class="form-floating mb-1">
    <InputNumber class="form-control" @bind-Value="Settings.FetchInterval" @bind-Value:after="OnMakelineFetchTimeChanged" />
    <label>Makeline Fetch Time (s)</label>
</div>

<!-- Oven Time -->
<div class="form-floating mb-1">
    <InputNumber class="form-control" @bind-Value="Settings.OvenTime" @bind-Value:after="OnOvenTimeChanged" />
    <label>Oven Time (s)</label>
</div>

<!-- Oven Grace Time -->
<div class="form-floating mb-1">
    <InputNumber class="form-control" @bind-Value="Settings.GraceTime" @bind-Value:after="OnOvenGraceTimeChanged" />
    <label>Oven Grace Time (s)</label>
</div>

<!-- Oven Alert Gap Time -->
<div class="form-floating mb-1">
    <InputNumber class="form-control" @bind-Value="Settings.AlertInterval" @bind-Value:after="OnOvenAlertGapTimeChanged" />
    <label>Oven Alert Gap Time (s)</label>
</div>

<!-- Short Alarm Sounds -->
<div class="form-floating mb-1">
    <div class="form-control form-check form-switch">
        <input type="checkbox" class="form-check-input mx-auto" @bind="Settings.UseShortAlarm" @bind:after="OnUseShortAlarmSoundChanged" />
    </div>
    <label class="text-nowrap">Use Short Alarm Sound</label>
</div>

<!-- Quiet Time -->
<div class="form-floating mb-1">
    <div class="d-flex flex-row justify-content-between form-control h-auto">
        <!-- IsEnabled -->
        <div class="form-floating col me-1">
            <div class="form-control form-check form-switch">
                <input type="checkbox" class="form-check-input mx-auto" @bind="Settings.QuietTime.IsEnabled" @bind:after="OnQuietTimeEnabledChanged" />
            </div>
            <label class="text-nowrap">Is Enabled</label>
        </div>

        <!-- Start -->
        <div class="form-floating col me-1">
            <input type="time" class="form-control" @bind="Settings.QuietTime.Start" @bind:after="OnQuietTimeStartChanged" />
            <label>Start</label>
        </div>

        <!-- End -->
        <div class="form-floating col">
            <input type="time" class="form-control" @bind="Settings.QuietTime.End" @bind:after="OnQuietTimeEndChanged" />
            <label>End</label>
        </div>
    </div>
    <label>Quiet Time</label>
</div>

<!-- Timed Order Alarm -->
<div class="form-floating mb-1">
    <div class="d-flex flex-row justify-content-between form-control h-auto">
        <!-- IsEnabled -->
        <div class="form-floating col me-1">
            <div class="form-control form-check form-switch">
                <input type="checkbox" class="form-check-input mx-auto" @bind="Settings.TimedOrderAlarm.IsEnabled" @bind:after="OnTimedOrderAlarmEnabledChanged" />
            </div>
            <label class="text-nowrap">Is Enabled</label>
        </div>

        <!-- SecondsPerPizza -->
        <div class="form-floating col me-1">
            <InputNumber class="form-control" @bind-Value="Settings.TimedOrderAlarm.SecondsPerPizza" @bind-Value:after="OnTimedOrderAlarmSecondsPerPizzaChanged" />
            <label>Pizza Time</label>
        </div>

        <!-- MinPizzaThreshold-->
        <div class="form-floating col">
            <InputNumber class="form-control" @bind-Value="Settings.TimedOrderAlarm.MinPizzaThreshold" @bind-Value:after="OnTimedOrderAlarmMinPizzaThresholdChanged" />
            <label class="text-nowrap">Pizza Threshold</label>
        </div>
    </div>
    <label>Timed Order Alarm</label>
</div>

@code
{
    private async Task OnMakelineHostChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/MakelineServer", Settings.MakelineServer);
    }

    private async Task OnMakelineCodeChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/MakelineCode", Settings.MakelineCode);
    }

    private async Task OnPulseApiServerChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/PulseApiServer", Settings.PulseApiServer);
    }

    private async Task OnMakelineFetchTimeChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/FetchInterval", Settings.FetchInterval);
    }

    private async Task OnOvenTimeChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/OvenTime", Settings.OvenTime);
    }

    private async Task OnOvenGraceTimeChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/GraceTime", Settings.GraceTime);
    }

    private async Task OnOvenAlertGapTimeChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/AlertInterval", Settings.AlertInterval);
    }

    private async Task OnUseShortAlarmSoundChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/UseShortAlarmSounds", Settings.UseShortAlarm);
    }

    private async Task OnQuietTimeEnabledChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/QuietTime/Enabled", Settings.QuietTime.IsEnabled);
    }

    private async Task OnQuietTimeStartChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/QuietTime/Start", Settings.QuietTime.Start);
    }

    private async Task OnQuietTimeEndChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/QuietTime/End", Settings.QuietTime.End);
    }

    private async Task OnTimedOrderAlarmEnabledChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/TimedOrderAlarm/Enabled", Settings.TimedOrderAlarm.IsEnabled);
    }

    private async Task OnTimedOrderAlarmSecondsPerPizzaChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/TimedOrderAlarm/SecondsPerPizza", Settings.TimedOrderAlarm.SecondsPerPizza);
    }

    private async Task OnTimedOrderAlarmMinPizzaThresholdChanged()
    {
        await Http.PostAsJsonAsync("api/Settings/TimedOrderAlarm/MinPizzaThreshold", Settings.TimedOrderAlarm.MinPizzaThreshold);
    }
}
