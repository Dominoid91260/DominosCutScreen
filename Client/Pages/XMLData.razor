@page "/xmldata"
@using DominosCutScreen.Client.Components
@using DominosCutScreen.Shared
@using System.Xml.Serialization;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Globalization;
@using System.Diagnostics.CodeAnalysis;
@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject SettingsService Settings

@{
    // Order by max bump time to the order that was bumped first will be first.
    List<MakeLineOrder> orders = Orders.Where(o => o.IsBumped).ToList();
    IEnumerable<MakeLineOrder> ongoing = new List<MakeLineOrder>();
    IEnumerable<MakeLineOrder> finished = new List<MakeLineOrder>();

    if (BumpHistory.Any())
    {
        orders.AddRange(BumpHistory.GroupBy(h => h.OrderNumber).Where(g => !orders.Any(o => o.OrderNumber == g.Key)).Select(g => new MakeLineOrder
        {
            OrderNumber = g.Key,
            TakenBy = "Reconstructed Order",
            TypeCode = g.First().TypeCode,
            IsExpedited = g.Any(h => h.Description.Contains("Priority", StringComparison.InvariantCultureIgnoreCase)),
            Items = g.GroupBySequential(i => new { i.Description, i.ToppingModifications }, i => i, (x, y) => x.Description.Equals(y.Description, StringComparison.InvariantCultureIgnoreCase) && Enumerable.SequenceEqual(x.ToppingModifications, y.ToppingModifications))
            .Select(g => new MakeLineOrderLine{
                Quantity = g.Count(),
                Description = g.First().Description,
                ToppingModifications = g.First().ToppingModifications,
                BumpedTimes = g.Select(i => i.BumpedAtTime).ToList(),
                PrettyItemName = g.First().PrettyItemName,
                PizzaBaseName = g.First().PizzaBaseName
            }).ToList()
        }));
    }

    if(orders.Any())
    {
        orders = orders.OrderBy(o => {
            if (o.Items.Any(i => i.BumpedTimes.Count == 0))
                return o.ActualOrderedAt;
            
            return o.Items.Max(i => i.BumpedTimes.Max());
        }).ToList();

        if (!showAllOrders)
        {
            ongoing = orders.Where(o => !CutBumpedOrders.Contains(o.OrderNumber) && !PinnedOrders.Contains(o.OrderNumber) && (DateTime.Now - o.Items.Max(i => i.BumpedTimes.Max())) <= TimeSpan.FromSeconds(Settings.OvenTime + Settings.GraceTime));
            finished = orders.Where(o => CutBumpedOrders.Contains(o.OrderNumber) || (DateTime.Now - o.Items.Max(i => i.BumpedTimes.Max())) > TimeSpan.FromSeconds(Settings.OvenTime + Settings.GraceTime)).Reverse();
        }
        else
        {
            // Repurpose `ongoing` here so we dont need to wrap it all in an if statement
            ongoing = orders;
            ongoing.Reverse();
        }
    }
}

<PageTitle>XML Data</PageTitle>

<nav class="navbar navbar-expand bg-light">
    <div class="container-fluid">
        <ul class="navbar-nav flex-row">
            <li class="nav-item">
                <button class="btn btn-primary" @onclick="@(async e => { showAllOrders = true; await InvokeAsync(StateHasChanged); })">Show All Orders</button>
            </li>
            <li class="nav-itemm ms-3">
                <button class="btn btn-primary" @onclick="@(async e => { showAllOrders = false; await InvokeAsync(StateHasChanged); })">Trim Orders</button>
            </li>
            <li class="nav-item ms-3">
                <button class="btn btn-primary" @onclick="@(async e => await RequestSilenceMakeline())">STFU Makeline</button>
            </li>
        </ul>
        <ul class="navbar-nav flex-row ms-auto">
            <li class="nav-item ma-auto">Manual Oven Timers:</li>
            <li class="nav-item ms-3">
                <button class="btn btn-primary" @onclick="AddHalfTimer">Half</button>
            </li>
            <li class="nav-item ms-3">
                <button class="btn btn-primary" @onclick="AddFullTimer">Full</button>
            </li>
        </ul>
    </div>
</nav>

<div class="d-grid">
    @if (PinnedOrders.Any() && orders.Any())
    {
    <h4>Pinned Orders</h4>
    <div class="d-flex flex-row overflow-auto thinScrollBar mb-4">
    @foreach (var number in PinnedOrders)
    {
        var orderNumber = number;
        var order = orders.Where(o => o.OrderNumber == orderNumber).First();
        <Order @key=orderNumber MakelineOrder=order OnReceiptClicked=OnOrderReprint OnDismissClicked=AddDismissedOrder ShowPin=false />
    }
    </div>
    }

    <h4>Live Orders</h4>
    <div id="liveOrders" class="d-flex flex-row overflow-auto thinScollBar mb-4">
    @foreach (var order in ongoing)
    {
        <Order @key=order.OrderNumber MakelineOrder=order OnReceiptClicked=OnOrderReprint OnDismissClicked=AddDismissedOrder OnPinClicked=AddPinnedOrder />
    }
    </div>

    <h4>Previous Orders</h4>
    <div id="previousOrders" class="d-flex flex-row overflow-auto thinScollBar mb-4">
    @foreach (var order in finished)
    {
        <Order @key=order.OrderNumber MakelineOrder=order  ShowDismiss=false OnReceiptClicked=OnOrderReprint OnPinClicked=AddPinnedOrder />
    }
    </div>
</div>

@code {
    class ManualTimer
    {
        public DateTime Created { get; set; }
        public TimeSpan Duration { get; set; }
        public bool Finished { get; set; } = false;
    }

    private System.Timers.Timer FetchTimer = new ();
    private List<MakeLineOrder> Orders = new();
    private List<MakeLineOrderItemHistory> BumpHistory = new();
    private List<int> CutBumpedOrders = new();
    private List<int> PinnedOrders = new();
    private bool showAllOrders = false;
    private HashSet<DateTime> AlertedOrderNumbers = new();
    private HashSet<int> TimedOrderAlerts = new();
    private List<ManualTimer> ManualTimers = new();
    private bool HasPlayedFirstOrderAlarm = false;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await GetData();

        FetchTimer.AutoReset = true;
        FetchTimer.Interval = (int)TimeSpan.FromSeconds(Settings.FetchInterval).TotalMilliseconds;
        FetchTimer.Elapsed += async (object? sender, System.Timers.ElapsedEventArgs e) =>
        {
            await GetData();
        };
        FetchTimer.Start();

        await JS.InvokeVoidAsync("SetAllOrderCardProgress");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/cutbenchhub"))
            .Build();

        hubConnection.On<DateTime, TimeSpan>("SetTimer", (createdAt, duration) =>
        {
            ManualTimers.Add(new()
            {
                Created = createdAt,
                Duration = duration,
                Finished = false
            });
        });

        hubConnection.On<int>("PinOrder", (orderNumber) => OnOrderPinned(orderNumber));
        hubConnection.On<int>("DismissOrder", (orderNumber) => OnOrderDismissed(orderNumber));

        await hubConnection.StartAsync();
    }

    protected async Task GetData()
    {
        await FetchBumpHistory();
        await FetchOrderData();
        await CheckTimedOrders();
        await CheckOvenTimer();
        await CheckManualTimers();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        FetchTimer?.Dispose();
    }

    private async Task AddDismissedOrder(MakeLineOrder Order)
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("DismissOrder", Order.OrderNumber);
        }

        OnOrderDismissed(Order.OrderNumber);
    }

    private void OnOrderDismissed(int OrderNumber)
    {
        PinnedOrders.Remove(OrderNumber);
        CutBumpedOrders.Add(OrderNumber);
    }

    private async Task OnOrderReprint(MakeLineOrder Order)
    {
        await Http.PostAsync($"{Settings.PulseApiServer}/api/Order/{Order.OrderNumber}/print?orderDate={DateTime.Now.ToString("yyyy-MM-dd")}", null);
    }

    private async Task AddPinnedOrder(MakeLineOrder Order)
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("PinOrder", Order.OrderNumber);
        }

        OnOrderPinned(Order.OrderNumber);
    }

    private void OnOrderPinned(int OrderNumber)
    {
        CutBumpedOrders.Remove(OrderNumber);

        if (PinnedOrders.Contains(OrderNumber))
        {
            PinnedOrders.Remove(OrderNumber);
        }
        else
        {
            PinnedOrders.Add(OrderNumber);
        }
    }

    private async Task RequestSilenceMakeline()
    {
        await Http.GetAsync("api/Makeline/silence");
    }

    private async Task PlayAlarm(string file, bool ignoreQuietTime = false)
    {
        if (Settings.QuietTime.IsEnabled)
        {
            var tod = TimeOnly.FromTimeSpan(DateTime.Now.TimeOfDay);
            if (tod >= Settings.QuietTime.Start && tod < Settings.QuietTime.End)
                return;
        }

        await JS.InvokeVoidAsync("playOvenAlert", file);
    }

    private async Task PlayOvenAlarm(bool ignoreQuietTime = false)
    {
        string file = "alarm.wav";

        if (Settings.UseShortAlarm)
        {
            file = "alarm_short.wav";
        }

        await PlayAlarm(file, ignoreQuietTime);
    }

    private async Task FetchBumpHistory()
    {
        var newBumpHistory = await Http.GetFromJsonAsync<IEnumerable<MakeLineOrderItemHistory>>("api/Makeline/bump");
        if (newBumpHistory == null)
            return;

        BumpHistory = newBumpHistory.ToList();
    }

    private async Task FetchOrderData()
    {
        var newOrders = await Http.GetFromJsonAsync<IEnumerable<MakeLineOrder>>("api/Makeline/orders");
        if (newOrders == null)
            return;

        // Check first order of the day
        // Grab all current live orders and inversely order by what time they appeared on the makeline. Oldest first
        if (!HasPlayedFirstOrderAlarm && BumpHistory.Count == 0)
        {
            var liveOrders = newOrders.Where(o => o.IsLive()).OrderByDescending(o => o.IsTimedOrder ? o.SavedAt : o.ActualOrderedAt);
            if (liveOrders.Any())
            {
                var first = liveOrders.First();

                // If the first order is an internet order or timed, play the sound
                // ASAP orders taken by staff are expected to be communicated
                if (first.IsTimedOrder || first.IsElectronic)
                {
                    await PlayAlarm("win32.mp3");
                    HasPlayedFirstOrderAlarm = true;
                }
            }
        }

        Orders = newOrders.ToList();
    }

    private async Task CheckOvenTimer()
    {
        var sortedBump = BumpHistory.GroupBy(h => h.BumpedAtTime).Select(g => g.Key).OrderBy(d => d).ToList();
        for (var index = 0; index < sortedBump.Count; ++index)
        {
            var currTime = sortedBump[index];
            var expectedAlertTime = currTime.AddSeconds(Settings.OvenTime);
            var cutOff = currTime.AddSeconds(Settings.OvenTime + Settings.GraceTime);

            if (!(DateTime.Now >= expectedAlertTime && DateTime.Now <= cutOff))
                continue;

            var last = (index == 0) ? DateTime.Now.Date : sortedBump[index - 1];

            if (
                (currTime - last).TotalSeconds >= Settings.AlertInterval &&
                !AlertedOrderNumbers.Contains(currTime)
                )
            {
                AlertedOrderNumbers.Add(currTime);
                await PlayOvenAlarm();
            }
        }
    }

    private async Task CheckTimedOrders()
    {
        if (!Settings.TimedOrderAlarm.IsEnabled || !Orders.Any(o => o.IsTimedOrder))
            return;

        bool shouldPlay = false;
        // Find all timed orders due to appear before we have time to make them.
        // We iterate over all of them before playing the sound so we dont play
        // the sound multiple times.
        foreach (var order in Orders.Where(o => o.IsTimedOrder && !o.IsLive() && !o.IsBumped && !TimedOrderAlerts.Contains(o.OrderNumber)))
        {
            var qtyToMake = order.Items.Sum(i => i.Quantity);

            if (qtyToMake < Settings.TimedOrderAlarm.MinPizzaThreshold)
                continue;

            var timeToMake = qtyToMake * Settings.TimedOrderAlarm.SecondsPerPizza;

            // If the order is going to appear on screen before we have time to make it
            // play the alarm
            if (order.SavedAt <= DateTime.Now + TimeSpan.FromSeconds(timeToMake))
            {
                shouldPlay = true;
                TimedOrderAlerts.Add(order.OrderNumber);
            }
        }

        if (shouldPlay)
        {
            await PlayAlarm("win32.mp3");
        }
    }

    private async Task CheckManualTimers()
    {
        foreach (var timer in ManualTimers.Where(t => !t.Finished))
        {
            if (DateTime.Now >= timer.Created + timer.Duration)
            {
                timer.Finished = true;
                await PlayOvenAlarm(true);
            }
        }
    }

    private void AddFullTimer()
    {
        ManualTimers.Add(new()
        {
            Created = DateTime.Now,
            Duration = TimeSpan.FromSeconds(Settings.OvenTime)
        });
    }

    private void AddHalfTimer()
    {
        ManualTimers.Add(new()
        {
            Created = DateTime.Now,
            Duration = TimeSpan.FromSeconds(Settings.OvenTime / 2)
        });
    }
}
