// <auto-generated />
using System;
using DominosCutScreen.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DominosCutScreen.Server.Migrations
{
    [DbContext(typeof(CutBenchContext))]
    [Migration("20240226052615_Added-PulseApi-Setting")]
    partial class AddedPulseApiSetting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("DominosCutScreen.Shared.PostBake", b =>
                {
                    b.Property<string>("ReceiptCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SettingsServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ToppingCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ToppingDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ReceiptCode");

                    b.HasIndex("SettingsServiceId");

                    b.ToTable("PostBakes");

                    b.HasData(
                        new
                        {
                            ReceiptCode = "*",
                            IsEnabled = true,
                            SettingsServiceId = 1,
                            ToppingCode = "SPO",
                            ToppingDescription = "Spring Onion"
                        },
                        new
                        {
                            ReceiptCode = "B",
                            IsEnabled = true,
                            SettingsServiceId = 1,
                            ToppingCode = "BtrChk",
                            ToppingDescription = "Butter Chicken Sce"
                        },
                        new
                        {
                            ReceiptCode = "CS",
                            IsEnabled = true,
                            SettingsServiceId = 1,
                            ToppingCode = "CeSpr",
                            ToppingDescription = "Cheese Sprinkle"
                        },
                        new
                        {
                            ReceiptCode = "F",
                            IsEnabled = true,
                            SettingsServiceId = 1,
                            ToppingCode = "FRANKS",
                            ToppingDescription = "Franks Hot Sce"
                        },
                        new
                        {
                            ReceiptCode = "GB",
                            IsEnabled = true,
                            SettingsServiceId = 1,
                            ToppingCode = "GBUTT",
                            ToppingDescription = "Garlic Butter"
                        },
                        new
                        {
                            ReceiptCode = "HB",
                            IsEnabled = true,
                            SettingsServiceId = 1,
                            ToppingCode = "HICBBQ",
                            ToppingDescription = "Hickory BBQ"
                        },
                        new
                        {
                            ReceiptCode = "HO",
                            IsEnabled = true,
                            SettingsServiceId = 1,
                            ToppingCode = "HOLLAND",
                            ToppingDescription = "Hollandaise"
                        },
                        new
                        {
                            ReceiptCode = "M",
                            IsEnabled = true,
                            SettingsServiceId = 1,
                            ToppingCode = "My",
                            ToppingDescription = "Mayonnaise"
                        },
                        new
                        {
                            ReceiptCode = "P",
                            IsEnabled = true,
                            SettingsServiceId = 1,
                            ToppingCode = "PERI",
                            ToppingDescription = "Peri Peri Sce"
                        },
                        new
                        {
                            ReceiptCode = "PA",
                            IsEnabled = true,
                            SettingsServiceId = 1,
                            ToppingCode = "PARMSC",
                            ToppingDescription = "Garlc Parm Sce"
                        },
                        new
                        {
                            ReceiptCode = "T",
                            IsEnabled = true,
                            SettingsServiceId = 1,
                            ToppingCode = "TOMCAP",
                            ToppingDescription = "Tom Caps Sce"
                        });
                });

            modelBuilder.Entity("DominosCutScreen.Shared.SettingsService", b =>
                {
                    b.Property<int>("SettingsServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlertInterval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FetchInterval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GraceTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MakelineCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MakelineServer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OvenTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PulseApiServer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SettingsServiceId");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            SettingsServiceId = 1,
                            AlertInterval = 150,
                            FetchInterval = 5,
                            GraceTime = 90,
                            MakelineCode = 2,
                            MakelineServer = "http://localhost:59108",
                            OvenTime = 300,
                            PulseApiServer = "http://pulseapi"
                        });
                });

            modelBuilder.Entity("DominosCutScreen.Shared.PostBake", b =>
                {
                    b.HasOne("DominosCutScreen.Shared.SettingsService", null)
                        .WithMany("PostBakes")
                        .HasForeignKey("SettingsServiceId");
                });

            modelBuilder.Entity("DominosCutScreen.Shared.SettingsService", b =>
                {
                    b.OwnsOne("DominosCutScreen.Shared.QuietTime", "QuietTime", b1 =>
                        {
                            b1.Property<int>("SettingsServiceId")
                                .HasColumnType("INTEGER");

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("IsEnabled")
                                .HasColumnType("INTEGER");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("TEXT");

                            b1.HasKey("SettingsServiceId");

                            b1.ToTable("Settings");

                            b1.WithOwner()
                                .HasForeignKey("SettingsServiceId");

                            b1.HasData(
                                new
                                {
                                    SettingsServiceId = 1,
                                    End = new TimeOnly(0, 0, 0),
                                    IsEnabled = false,
                                    Start = new TimeOnly(0, 0, 0)
                                });
                        });

                    b.OwnsOne("DominosCutScreen.Shared.TimedOrderAlarm", "TimedOrderAlarm", b1 =>
                        {
                            b1.Property<int>("SettingsServiceId")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsEnabled")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("MinPizzaThreshold")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SecondsPerPizza")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SettingsServiceId");

                            b1.ToTable("Settings");

                            b1.WithOwner()
                                .HasForeignKey("SettingsServiceId");

                            b1.HasData(
                                new
                                {
                                    SettingsServiceId = 1,
                                    IsEnabled = false,
                                    MinPizzaThreshold = 7,
                                    SecondsPerPizza = 15
                                });
                        });

                    b.Navigation("QuietTime")
                        .IsRequired();

                    b.Navigation("TimedOrderAlarm")
                        .IsRequired();
                });

            modelBuilder.Entity("DominosCutScreen.Shared.SettingsService", b =>
                {
                    b.Navigation("PostBakes");
                });
#pragma warning restore 612, 618
        }
    }
}
